19-10-10
- Takes an API key and a pair
- When run, will import interval_mins candle data in such a way where the next
    candle will come in 1-2 minutes
- On the first new candle, init() will be ran
- On the following new candles, tick() will be ran

19-10-11
On each tick, I need:
(ins)
- Market (exchange/pair)
- Interval
- OHLCV data (candle data)
(portfolios)
- Positions (all owned coins or at least the coins the bot is using.)

On each tick I would like to take care of things like importing the portfolio,
checking for deposits, withdrawals, and trades, and calculating profits. I also
want a built in buy and sell function and pretty much anything else to do with
communicating with binance.

Currently init is ran right at the start, then tick is run 1-2 minutes later and
every interval mins after that.

positions structure:
positions = {
    "asset1": "amt",
    "asset2": "amt",
    ...
}

I don't have the total account size. I also don't have the prices for each asset.
I do have the price of the pair though, from ins. So I can calculate the size
of the trading account in terms of the base coin.

If I wanted to monitor all coins it would be hard to determine dw or other trade
status.. If I only monitor the trading account it will be about the same as on
ct.

However, I could use my ability to get info about dws and other trades... And I
could use that to monitor all of the coins.

Anyways, for now I'll just monitor the trading account like on CT. This will be
easier.

10-13
If I keep calling vars like exchange, pair, candles etc inside of functions (tick)
which I didn't pass those vars into, it causes bugs.

If I try to update the value of one of these vars, it creates a temporary var
inside the function so that the outside var is not changed.

If I try to print a var, then change its value, I'll get a bug because the
var I'm trying to print, the temporary var, hasn't been created yet. Even though
the outer var is perfectly defined.

To avoid these issues, I need to pass the var into the function. Then I can
update its value permanently and the var is always defined.

However, I have a lot of vars which I need to pass in. So I think instead of
passing them all individually, I'll create an Instance class which stores all
this info, and then I can just pass the class instance into the function.

***

Test: Can I change a value in tick and then still see the new value on the next
tick? Can I print a var and then change its value afterwords?

***

Also, I want the candles to be an attribute of the Instance class. Because each
trading instance will be using its own candle data.

As for the portfolio..

I could track the whole account and all dws/trades but then how do I run multiple
instances? I would have to stop the portfolio tracker and all of the running
bots every time I want to add a new one.

If I just import portfolio data for the asset and base and save it as a part of
the Instance class then I can run different bots in different terminals, but I
have to program the logic to see dws/trades.

Well actually maybe I can still import dws/trades information.

10-14
The Instance class stores everything:
- Exchange
- Asset, base, pair
- Interval
- Candles
- Portfolio

It pings every 2 seconds where it checks for a new raw_candle and/or candle.
On each new candle it ticks.

10-22
After messing around with dws/trades (dwts) direct imports.. It seems feasible.

I can get only the dws that happened since the end of the most recent candle.
With trades, I'll have to get the most recent 500 and eliminate irrelevant ones.

Well actually, I don't have to get the 500 most recent, I can lower that number.
Is there a case when I would want a large number of imported trades?
Well, maybe the user was messing around with something, and in the course of 2
hours traded 100 times.. Unlikely, but possible.

If the user trades more times than the program imports, there will be a
discrepancy between the actual assetchange and basechange vs the assetchange and
basechange predicted by the imports.

I shall calculate the predicted assetchange and basechange once I imports dwts
and then compare it with the actual assetchange and basechange and see what I
discover.

12-9
I think I have the dwts mostly figured out. I'm going to save a copy here with
all my notes and commented code and timestamps just for the record. Then I'll
clean it up and release a better version.

12-19
To do list:
- Import talib
- Use talib to program a simple sxs (100/20) strategy
    - Program buys and sells methods
    - Lots to think about here regarding rin target and how trades are executed
- Distinguish between bot trades and other trades
- Program the fake portfolio
    - Fake portfolio does not include deposits or withdrawals
    - Fake portfolio only updated at start and when a trade is detected
    - Calculate bot profits and asset profits

12-25
How to install python-binance and talib on Linux Mint Mate 19.2
- Update system
$ sudo apt install python3-pip python3-setuptools python3-dev
$ sudo pip3 install python-binance
- See README on TA-Lib python wrapper GitHub
- You need to install TA-Lib on your computer before the TA-Lib python wrapper
    will work.
- Locate the part on the README where it gives you a file to download and
    instructions to extract and install TA-Lib on Linux. Install TA-Lib
$ sudo apt install python3-dev
$ sudo pip3 install TA-Lib

***

I'm going to store a dict called self.signal that contains information about
the current trading status.

It will be structured like this:
self.signal = {
    'rinTarget': float
    'rinTargetLast': float
    'position': str
    'status': int
    'apc': float
    'target': float
    'stop': float
}

- rinTarget stands for ratio-invested-target. It is what ratio of your funds
should be invested, between 0 and 1.
* Everything is optional besides rinTarget *
- rinTarget is chosen in self.tick and drives the bot's trading behavior
- If rinTarget is not chosen the bot will not trade
- rinTargetLast stores the previous rinTarget and should be automatically updated
- position stores the current investment position in case your strategy depends
on it, should be automatically updated
- status is 0 by default, user can opt to change it as a part of their strategy
- apc is the average price that you entered the current 'position' as defined
above, should be automatically updated
- target/stop is optional, if the user's strategy has a target and stop then they
can store those values here

This way, the user's job is to set rinTarget between 0 and 1 using TA-Lib
indicators or other python code. rinTargetLast, position, apc should be
automatically set. status, target, and stop are optional if the user needs them.

Then, once the user strategy sets rinTarget in self.tick, self.bso is called
and the buys or sells are executed to meet rinTarget.

Also added a spot for self.get_seeds and self.updateF which will eventually be
used to set randomization seeds and init/update the fake portfolios respectively.
The fake portfolios will be used to track information about performance.

12-27
I want to have certain parameters that the user can change while the bot is
running.

In particular, I want to set a maximum amount of funds for the bot to invest.
So when the bot opens a new position, it will always invest the same amount.
This allows you to run multiple bots on one account.

This is difficult to implement though because this bot is run in a terminal
and in the future planned to be ran in daemon mode, outputting logs to a text
file.

I think the best way to implement changeable parameters is to store them in a
text file and then open the file every time a new candle is generated. The user
can check the log in the log file, and if they want to change parameters they
can open the config file and change them there.

I'm going to start with some built-in parameters like maximum investment size
then worry about potentially allowing optional parameters later.

***

New tick?
- Update vars (ticks, days)
- Get the new candle
- Get the portfolio (including dwts)
- Do tick and bso

Where do I insert importing params?
- Params definitely affect tick and bso
- Params could affect getting the portfolio (outputting dwts)
- I could always import params in the beginning and then just not use them until
I need them (sounds good)

***

Params consist of
- Key
- Value
- Value range (optional)
- Description (optional)

I'm thinking I can store the params in the text file like this:
param1=1
param2=True
param3="yes"

will have to check value ranges for built-in params in the code. If user adds
custom params they will have to check their own ranges

I create a params object. Import the text file. Save the data as a dict.
Then each tick I can compare the new params dict with the previous params dict
and report any changes.

I can refer to params values like params['param1']

Config file will be called config.txt

***

I've successfully made it so that params are stored in config.txt, they are
imported on init and on each tick, and any changes in params will be processed
and outputted to log.

This allows me to use the funds parameter which I need to program the buys and
sells.
